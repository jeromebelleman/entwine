#! /usr/bin/env python
# coding=utf-8

'''
Generate web site
'''

import sys, os
from argparse import ArgumentParser, ArgumentDefaultsHelpFormatter
import subprocess
import string
import re
import StringIO
import datetime
import ConfigParser
import shlex
import traceback

RETAG = re.compile(r'(<%.*?%>)', re.DOTALL)
RETITLE = re.compile(r'^# (.*)', re.MULTILINE)
REOPTIONS = re.compile(r'<!-- +(.*?) +-->')
DATEFMT = '%d %b %Y'

class MarkdownTemplate(string.Template):
    '''
    Markdown template
    '''

    delimiter = '%%'

def latest():
    '''
    Get modification time for last-updated file
    '''

    upd = 0
    for dirpath, dirnames, filenames in os.walk('.'):
        for filename in filenames + dirnames:
            mtime = os.stat(dirpath + '/' + filename).st_mtime
            upd = mtime if mtime > upd else upd

    return upd

def markdown(cfgdir, tmplmtime, rootdir, dirpath, infile,
             outfile, force, dryrun):
    '''
    Run Markdown (and Python beforehand)
    '''

    # Move to Markdown file's directory
    olddirpath = os.getcwd()
    os.chdir(dirpath)

    # Check last change in this subtree
    if not os.path.isfile(outfile) or force or \
        latest() > os.stat(outfile).st_mtime or \
        tmplmtime > os.stat(outfile).st_mtime: # FIXME Stat twice

        print "Writing %s/%s" % (dirpath, outfile)

        # Open Markdown file
        fhl = open(infile)
        contents = fhl.read()

        # Read options
        try:
            first = contents.find('\n')
            match = REOPTIONS.match(contents[:first])
            opts = ['--' + opt for opt in match.group(1).split()]
            contents = contents[first + 1:]
        except AttributeError:
            opts = []

        # Run inline Python
        matches = RETAG.split(contents)
        globs = {
            '__params__': {},
            'os': os,
        }
        for i, tag in enumerate(matches):
            if tag.startswith('<%'):
                sys.stdout = StringIO.StringIO()
                try:
                    exec(tag[2:-2], globs) # pylint: disable=exec-statement
                except Exception: # pylint: disable=broad-except
                    print >> sys.stderr, \
                        '\n'.join(traceback.format_exc().splitlines()[3:])
                matches[i] = sys.stdout.getvalue()
                sys.stdout = sys.__stdout__

        # Clean up
        fhl.close()

         # Run Markdown
        proc = subprocess.Popen(['pandoc', '--template',
                                 cfgdir + '/template.html', '-H',
                                 cfgdir + '/styles.css'] + opts,
                                stdin=subprocess.PIPE, stdout=subprocess.PIPE)

        out, _ = proc.communicate(''.join(matches))

        # Get updated time
        try:
            upd = globs['__params__']['updated']
        except KeyError:
            mtime = os.stat(infile).st_mtime
            upd = datetime.date.fromtimestamp(mtime).strftime(DATEFMT)

        # Get breadcrumbs
        breadcrumbs = '<a href="/">Home</a>'
        dirnames = dirpath[len(rootdir):].split('/')[1:-1]
        for i, dirname in enumerate(dirnames):
            breadcrumbs += '/<a href="%s">%s</a>' % \
                ((len(dirnames) - i) * '../', dirname)

        # Write HTML
        if not dryrun:
            fhl = open(outfile, 'w')
            template = MarkdownTemplate(out)
            fhl.write(template.substitute(upd=upd, breadcrumbs=breadcrumbs))
            fhl.close()

    # Step back
    os.chdir(olddirpath)

def main():
    '''
    Main loop
    '''

    parser = ArgumentParser(description="generate web site",
                            formatter_class=ArgumentDefaultsHelpFormatter)
    parser.add_argument('rootdir', help="root directory",
                        type=os.path.expanduser)
    parser.add_argument('--cfgdir', '-c', help="configuration directory",
                        default='~/.entwine', type=os.path.expanduser)
    parser.add_argument('--dryrun', '-n', help="don't perform any change",
                        action='store_true')
    parser.add_argument('--force', '-f',
                        help="update all files even if there's no need to",
                        action='store_true')
    args = parser.parse_args()

    # Configuration
    config = ConfigParser.SafeConfigParser()
    config.read(args.cfgdir + '/entwine.cfg')

    # Get template modification time
    tmplmtime = os.stat(args.cfgdir + '/template.html').st_mtime

    # Run Markdown on files
    dirpaths = []
    for dirpath, _, filenames in os.walk(args.rootdir):
        if config.get('formatter', 'infile') in filenames:
            dirpaths.append(dirpath)

    for dirpath in sorted(dirpaths, key=lambda p: p.count('/'), reverse=True):
        markdown(args.cfgdir, tmplmtime,
                 args.rootdir, dirpath, config.get('formatter', 'infile'),
                 config.get('formatter', 'outfile'), args.force, args.dryrun)

if __name__ == '__main__':
    sys.exit(main())
