#! /usr/bin/env python

'''
Generate web site
'''

import sys, os
from argparse import ArgumentParser, ArgumentDefaultsHelpFormatter
import subprocess
import re
import StringIO
import datetime
import ConfigParser
import shlex

RETAG = re.compile(r'(<%.*?%>)', re.DOTALL)
DATEFMT = '%d %b %Y'
HTMLFILE = 'index.md.html'
UPDSTR = 'Updated '

def latest():
    upd = 0
    for dirpath, dirnames, filenames in os.walk('.'):
        for filename in filenames + dirnames:
            mtime = os.stat(dirpath + '/' + filename).st_mtime
            upd = mtime if mtime > upd else upd

    return upd

def markdown(formatter, template, tmplmtime, rootdir, dirpath, infile, outfile,
             force, dryrun):
    '''
    Run Markdown (and Python beforehand)
    '''

    # Move to Markdown file's directory
    olddirpath = os.getcwd()
    os.chdir(dirpath)

    # Check last change in this subtree
    if not os.path.isfile(HTMLFILE) or force or \
        latest() > os.stat(HTMLFILE).st_mtime or \
        tmplmtime > os.stat(HTMLFILE).st_mtime: # FIXME Stat twice
        # Open Markdown file
        fhl = open(dirpath + '/' + infile)

        # Run inline Python
        matches = RETAG.split(fhl.read())
        sys.stdout = StringIO.StringIO()
        globs = {'os': os, '__params__': {}}
        for i, tag in enumerate(matches):
            if tag.startswith('<%'):
                exec(tag[2:-2], globs) # pylint: disable=exec-statement
                matches[i] = sys.stdout.getvalue()
        sys.stdout = sys.__stdout__

        # Clean up
        fhl.close()

         # Run Markdown
        proc = subprocess.Popen(formatter,
                                stdin=subprocess.PIPE, stdout=subprocess.PIPE)

        out, _ = proc.communicate(''.join(matches))

        # Get updated time
        if 'updated' in globs['__params__']:
            if globs['__params__']['updated']:
                upd = UPDSTR + globs['__params__']['updated']
            else:
                upd = ''
        else:
            mtime = os.stat(infile).st_mtime
            upd = UPDSTR + datetime.date.fromtimestamp(mtime).strftime(DATEFMT)

        # Get breadcrumbs
        breadcrumbs = '<a href="/">Home</a>'
        dirnames = dirpath[len(rootdir):].split('/')[1:-1]
        for i, dirname in enumerate(dirnames):
            breadcrumbs += '/<a href="%s">%s</a>' % \
                ((len(dirnames) - i) * '../', dirname)

        # Write HTML
        print "Writing %s/%s" % (dirpath, HTMLFILE)
        if not dryrun:
            fhl = open(HTMLFILE, 'w')
            fhl.write(template % (out, upd, breadcrumbs))
            fhl.close()

    # Step back
    os.chdir(olddirpath)

def main():
    '''
    Main loop
    '''

    parser = ArgumentParser(description="generate web site",
                            formatter_class=ArgumentDefaultsHelpFormatter)
    parser.add_argument('rootdir', help="root directory",
                        type=os.path.expanduser)
    parser.add_argument('--template', '-t', help="template HTML file",
                        default='~/.entwine/template.html',
                        type=os.path.expanduser)
    parser.add_argument('--configfile', '-c', help="configuration file",
                        default='~/.entwine/entwine.cfg',
                        type=os.path.expanduser)
    parser.add_argument('--dryrun', '-n', help="don't perform any change",
                        action='store_true')
    parser.add_argument('--force', '-f',
                        help="update all files even if there's no need to",
                        action='store_true')
    args = parser.parse_args()

    # Configuration
    config = ConfigParser.SafeConfigParser()
    config.read(args.configfile)

    # Load template
    tmplmtime = os.stat(args.template).st_mtime
    fhl = open(args.template)
    template = fhl.read()

    # Run Markdown on files
    dirpaths = []
    for dirpath, _, filenames in os.walk(args.rootdir):
        if config.get('formatter', 'infile') in filenames:
            dirpaths.append(dirpath)

    formatter = shlex.split(config.get('formatter', 'command'))
    for dirpath in sorted(dirpaths, key=lambda p: p.count('/'), reverse=True):
        markdown(formatter, template, tmplmtime, args.rootdir, dirpath,
                 config.get('formatter', 'infile'),
                 config.get('formatter', 'outfile'), args.force, args.dryrun)

    # Clean up
    fhl.close()

if __name__ == '__main__':
    sys.exit(main())
