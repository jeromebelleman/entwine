#! /usr/bin/env python
# coding=utf-8

'''
Generate web site
'''

import sys
reload(sys)
sys.setdefaultencoding('UTF8')

import os
from argparse import ArgumentParser, ArgumentDefaultsHelpFormatter
import subprocess
import string
import re
import StringIO
import datetime
import shlex
import traceback
import yaml

RETAG = re.compile(r'(<%.*?%>)', re.DOTALL)
RETITLE = re.compile(r'^# (.*)', re.MULTILINE)
REOPTIONS = re.compile(r'<!-- +(.*?) +-->')
DATEFMT = '%d %b %Y'

HEAD0 = r'<?xml version="1.0" encoding="UTF-8"?>'
HEAD1 = r'<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">'

class MarkdownTemplate(string.Template):
    '''
    Markdown template
    '''

    delimiter = '%%'

def sitemaps(config, outdir, dryrun):
    '''
    Write site maps
    '''

    for filename in config['sitemaps']['files']:
        path = '%s/%s' % (outdir, filename)
        print "Writing " + path
        if not dryrun:
            with open(path, 'w') as fhl:
                print >> fhl, HEAD0
                print >> fhl, HEAD1
                print >> fhl, r'  <url><loc>%s</loc></url>' % \
                    config['sitemaps']['files'][filename]
                for url in config['sitemaps']['urls']:
                    print >> fhl, r'  <url><loc>%s/%s</loc></url>' % \
                        (config['sitemaps']['files'][filename], url)
                print >> fhl, r'</urlset>'

def latest():
    '''
    Get modification time for last-updated file
    '''

    upd = 0
    for dirpath, dirnames, filenames in os.walk('.'):
        for filename in filenames + dirnames:
            mtime = os.stat(dirpath + '/' + filename).st_mtime
            upd = mtime if mtime > upd else upd

    return upd

def markdown(cfgdir, # pylint: disable=too-many-locals, too-many-statements
             tmplmtime, indir, outdir, dirpath, infile, outfile, author,
             force, dryrun):
    '''
    Run Markdown (and Python beforehand)
    '''

    # Move to Markdown file's directory
    olddirpath = os.getcwd()
    os.chdir(dirpath)
    dirpath = dirpath[len(indir):] # Or len(outdir), doesn't matter
    outdir = '%s%s' % (outdir, dirpath)
    outpath = '%s/%s' % (outdir, outfile)

    # Check last change in this subtree
    if not os.path.isfile(outpath) or force or \
        latest() > os.stat(outpath).st_mtime or \
        tmplmtime > os.stat(outpath).st_mtime: # FIXME Stat twice

        # Make directories, deep as we can so cause time changes
        if not os.path.lexists(outdir):
            print "Making %s/" % outdir
            if not dryrun:
                os.makedirs(outdir)

        print "Writing %s" % outpath

        # Open Markdown file
        fhl = open(infile)
        contents = fhl.read()

        # Read options
        try:
            first = contents.find('\n')
            match = REOPTIONS.match(contents[:first])
            opts = ['--' + opt for opt in shlex.split(match.group(1))]
            contents = contents[first + 1:]
        except AttributeError:
            opts = []

        # Run inline Python
        matches = RETAG.split(contents)
        globs = {
            '__params__': {},
            'os': os,
        }
        for i, tag in enumerate(matches):
            if tag.startswith('<%'):
                sys.stdout = StringIO.StringIO()
                try:
                    exec(tag[2:-2], globs) # pylint: disable=exec-used
                except Exception: # pylint: disable=broad-except
                    print >> sys.stderr, \
                        '\n'.join(traceback.format_exc().splitlines()[3:])
                matches[i] = sys.stdout.getvalue()
                sys.stdout = sys.__stdout__ # pylint: disable=redefined-variable-type

        # Clean up
        fhl.close()

         # Run Markdown
        proc = subprocess.Popen(['pandoc', '--template',
                                 cfgdir + '/template.html', '-H',
                                 cfgdir + '/styles.css',
                                 '-Vpath=' + dirpath] + opts,
                                stdin=subprocess.PIPE, stdout=subprocess.PIPE)

        out, _ = proc.communicate(''.join(matches))

        # Get updated time
        try:
            upd = globs['__params__']['updated']
        except KeyError:
            mtime = os.stat(infile).st_mtime
            upd = datetime.date.fromtimestamp(mtime).strftime(DATEFMT)
        if upd:
            upd += ', ' + author
        else:
            upd = author

        # Get breadcrumbs
        breadcrumbs = '<a href="/">Home</a>'
        dirnames = dirpath.split('/')[1:-1]
        for i, dirname in enumerate(dirnames):
            breadcrumbs += '/<a href="%s">%s</a>' % \
                ((len(dirnames) - i) * '../', dirname)

        # Write HTML
        if not dryrun:
            fhl = open(outpath, 'w')
            template = MarkdownTemplate(out)
            fhl.write(template.substitute(upd=upd, breadcrumbs=breadcrumbs))
            fhl.close()

    # Step back
    os.chdir(olddirpath)

def main():
    '''
    Main loop
    '''

    parser = ArgumentParser(description="generate web site",
                            formatter_class=ArgumentDefaultsHelpFormatter)
    parser.add_argument('--cfgdir', '-c', help="configuration directory",
                        default='~/.entwine',
                        type=lambda x: os.path.abspath(os.path.expanduser(x)))
    parser.add_argument('--indir', '-i', help="input page directory",
                        type=os.path.expanduser)
    parser.add_argument('--outdir', '-o', help="output page directory",
                        type=os.path.expanduser)
    parser.add_argument('--dryrun', '-n', help="don't perform any change",
                        action='store_true')
    parser.add_argument('--force', '-f',
                        help="update all files even if there's no need to",
                        action='store_true')
    args = parser.parse_args()

    # Configuration
    with open(args.cfgdir + '/entwine.yaml') as fhl:
        config = yaml.load(fhl, Loader=yaml.BaseLoader)

    # Get template modification time
    tmplmtime = os.stat(args.cfgdir + '/template.html').st_mtime

    # Set input and output directories
    indir = args.indir \
        if args.indir \
        else os.path.abspath(os.path.expanduser(config['formatter']['indir']))
    outdir = args.outdir \
        if args.outdir \
        else os.path.abspath(os.path.expanduser(config['formatter']['outdir']))

    # Make directories and inventory paths to sort them later on
    dirpaths = []
    for dirpath, _, filenames in os.walk(indir):
        if config['formatter']['infile'] in filenames:
            dirpaths.append(dirpath)

    # Sort paths deepest first to collect changed times & run Markdown on files
    for dirpath in sorted(dirpaths, key=lambda p: p.count('/'), reverse=True):
        markdown(args.cfgdir, tmplmtime,
                 indir, outdir, dirpath,
                 config['formatter']['infile'],
                 config['formatter']['outfile'],
                 config['formatter']['author'],
                 args.force, args.dryrun)

    # Write site maps
    sitemaps(config, outdir, args.dryrun)

if __name__ == '__main__':
    sys.exit(main())
